#!/usr/bin/python
# -*- coding: utf-8 -*-
# PYTHON_ARGCOMPLETE_OK
import argparse
import argcomplete
import os
import json
import pandas

import logging
logging.basicConfig(
    format='%(asctime)s %(levelname)s: %(message)s',
    level=logging.DEBUG)


class OerpInstance(object):

    """
    This python object pretend to check and update an instance branchs.
    """

    epilog = """
    Odoo Community Tool.
    Source code at git@github.com:vauxoo-dev/gist-vauxoo
    Development/Coded by Katherine Zaoral <kathy@vauxoo.com> (github @zaoral)
    """

    def __init__(self):
        """
        Initialization of the class.
        @return: None
        """
        self.set_repos()
        self.args = self.argument_parser()
        self.env = self.args['env']
        self.confirm_required = True
        return None

    def argument_parser(self):
        """
        This function create the help command line, manage and filter the
        parameters of this script (default values, choices values).
        @return dictionary of the arguments.
        """
        parser = argparse.ArgumentParser(
            prog='odoo-instance',
            description='Given a list of instance branches will check/modify',
            formatter_class=argparse.ArgumentDefaultsHelpFormatter,
            epilog=self.epilog)
        common = self.get_common_args()
        subparsers = parser.add_subparsers(dest='action')

        subparsers.add_parser(
            'status',
            parents=[common],
            help=('Check the status of the repos.'))

        subparsers.add_parser(
            'update',
            parents=[common],
            help=('Update the repos.'))

        subparsers.add_parser(
            'paths',
            parents=[common],
            help=('View the local path for instance.'))

        subparsers.add_parser(
            'merged',
            parents=[common],
            help=('Check the merged branchs.'))

        subparsers.add_parser(
            'unmerged',
            parents=[common],
            help=('Show the development branchs.'))

        subparsers.add_parser(
            'stash',
            parents=[common],
            help=('Show stash in branchs.'))

        subparsers.add_parser(
            'clean',
            parents=[common],
            help=('Clean out all the branchs.'))

        subparsers.add_parser(
            'checkout',
            parents=[common],
            help=('Will checkout to change to master branches.'))

        subparsers.add_parser(
            'fetch',
            parents=[common],
            help=('Will fetch all the new data in instance branches.'))

        subparsers.add_parser(
            'diff',
            parents=[common],
            help=('Will show the diff of the current changes.'))

        subparsers.add_parser(
            'reset',
            parents=[common],
            help=('Will run git reset --hard. Remove all the staged/unstaged'
                  ' changes'))

        subparsers.add_parser(
            'summary',
            parents=[common],
            help=('Will show status, diff, stash, unmerged of every branch'))

        subparsers.add_parser(
            'current_commit',
            parents=[common],
            help=('Will show current commit number'))

        # New clean powered methods
        subparsers.add_parser(
            'restart',
            parents=[common],
            help=('Will clean all to start new environment'
                  ' with updated branches and databases'))

        subparsers.add_parser(
            'database_reset',
            parents=[common],
            help=('Will drop current databases and create a new ones'))

        argcomplete.autocomplete(parser)
        return parser.parse_args().__dict__

    def get_common_args(self):
        """
        Create a parent parser with the repeat arguments.
        """
        common = argparse.ArgumentParser(add_help=False)
        common.add_argument(
            '--env', metavar='instance', type=str,
            default='addons-vauxoo',
            choices=self.repos.keys(),
            help=('The enviroment to check/update.'))
        return common

    def confirm_run(self, args):
        """
        Manual confirmation before runing the script. Very usefull.
        @param args: dictionary of arguments.
        @return True or exit the program in the confirm is no.
        """
        if not self.confirm_required:
            return True

        print'\n... Configuration of Parameters Set'
        for (parameter, value) in args.iteritems():
            print '%s = %s' % (parameter, value)

        confirm_flag = False
        while confirm_flag not in ['y', 'n']:
            confirm_flag = raw_input(
                'Confirm the run with the above parameters? [y/n]: ')
            if confirm_flag == 'y':
                print 'The script parameters were confirmed by the user'
            elif confirm_flag == 'n':
                print 'The user cancel the operation'
                exit()
            else:
                print 'The entry is not valid, please enter y or n.'
        return True

    def set_repos(self):
        """
        Set the repos configurated for every enviroment.
        @return True
        """
        self.repos = dict()
        # TODO need to be set as a command line parameter and save it by
        # default.
        config_dir = os.path.split(__file__)[0]
        for config_file in os.listdir(config_dir):
            data = dict()
            if config_file.endswith(".json"):
                with open(os.path.join(config_dir, config_file), 'r') as data_file:
                    data = json.load(data_file)
                self.repos.update({config_file[:-5]: data})
        return True

    def run(self):
        """
        run the given command in the command line.
        @return True
        """

        self.cr_repo = self.repos.get(self.env, False)
        if not self.cr_repo:
            print 'Dont find repository json file'
            exit()

        action = self.args.get('action', False)

        action == 'status' and self.check_instance()
        action == 'update' and self.update_instance()
        action == 'merged' and self.merged_branches()
        action == 'unmerged' and self.unmerged_branches()
        action == 'stash' and self.stash_list()
        action == 'clean' and self.clean_branches()
        action == 'paths' and self.paths_instance()
        action == 'checkout' and self.checkout_branches()
        action == 'fetch' and self.fetch_branches()
        action == 'diff' and self.diff_branches()
        action == 'reset' and self.reset_branches()
        action == 'summary' and self.branch_summary()
        action == 'restart' and self.create_instance()
        action == 'database_reset' and self.create_database()
        action == 'current_commit' and self.current_commit()
        return True

    def print_repo_data(self, repo, branch):
        """
        @return True
        """
        self.print_repo_data_oneline(repo, branch)
        # print ' '.join([
        #     '\nName:  ', repo,
        #     '\nPath:  ', branch['path'],
        #     '\nBranch:', branch['branch'],
        # ])
        return True

    def print_repo_data_oneline(self, repo, branch):
        """
        @return True
        """
        print '\n** ' + repo
        return True

    def check_instance(self):
        """
        This method check thre revnos of the branchs associated to the
        instance.
        @return True
        """
        print '\nCheck status of {env} branches'.format(env=self.env)
        for (repo, branch) in self.cr_repo.iteritems():
            path = branch['path']
            self.print_repo_data(repo, branch)
            os.system('cd {path} && git log --oneline -1'.format(path=path))
            os.system('cd {path} && git status -sb'.format(path=path))
        return True

    def current_commit(self):
        """
        This method check thre revnos of the branchs associated to the
        instance.
        @return True
        """
        print '\nShow the commit revision numbers of {env} branches'.format(
            env=self.env)
        for (repo, branch) in self.cr_repo.iteritems():
            self.print_repo_data(repo, branch)
            os.system('cd {path} && git rev-parse HEAD'.format(
                path=branch['path']))
        return True

    def update_instance(self):
        """
        this method update the branches of the fiven instance.
        @return True.
        """
        self.confirm_run(self.args)
        print '\nUpdate the {env} branches'.format(env=self.env)
        for (repo, branch) in self.cr_repo.iteritems():
            path = branch['path']
            self.print_repo_data(repo, branch)
            os.system('cd {path} && git log --oneline -1'.format(path=path))
            os.system('cd {path} && git pull'.format(path=path))
        return True

    def paths_instance(self):
        """
        this method show the branches information for a given instance.
        @return True.
        """
        print '\nInstance addons path {env}'.format(env=self.env)
        data = self.repos[self.env]
        df = pandas.DataFrame(data.values(), index=data.keys())
        print df.path
        return True

    def merged_branches(self):
        """
        this method check if there are merged branchs that can be deleted.
        @return true.
        """
        print '\nCheck merged in {env} branches'.format(env=self.env)
        for (repo, branch) in self.cr_repo.iteritems():
            path = branch['path']
            self.print_repo_data(repo, branch)
            os.system('cd {path} && git branch --merged'.format(path=path))
        return True

    def unmerged_branches(self):
        """
        this method check if there are merged branchs that can be deleted.
        @return true.
        """
        print '\nCheck unmerged branchs in {env} instance'.format(env=self.env)
        for (repo, branch) in self.cr_repo.iteritems():
            path = branch['path']
            self.print_repo_data(repo, branch)
            os.system('cd {path} && git branch --no-merged'.format(path=path))
        return True

    def stash_list(self):
        """
        show the stash saves in the branchs.
        @return true.
        """
        print '\nCheck stash list in {env} instance'.format(env=self.env)
        for (repo, branch) in self.cr_repo.iteritems():
            path = branch['path']
            self.print_repo_data(repo, branch)
            os.system('cd {path} && git stash list'.format(path=path))
        return True

    def clean_branches(self):
        self.confirm_run(self.args)
        print '\nClean branches in {env}'.format(env=self.env)
        for (repo, branch) in self.cr_repo.iteritems():
            path = branch['path']
            self.print_repo_data(repo, branch)
            os.system('cd {path} && git clean -dxf'.format(path=path))
        return True

    def create_instance(self):
        """
        Will make this:

            git reset --hard
            git checkout {master}
            git fetch --all
            dropdb openerp_test
            dropdb openerp_template
            /root/maintainer-quality-tools/travis/clone_oca_dependencies
            TEST_ENABLE=0 /entrypoint.sh
        """

        print (
            "\n\tThe next actions will be done:"
            "\n\n\t  1. Clean instance branches"
            "\n\t     git reset --hard"
            "\n\t     git checkout <master>"
            "\n\t     git pull"
            "\n\n\t  2. Updated Branches status"
            "\n\t     git log --oneline -1"
            "\n\t     git status -sb"
            "\n\n\t  3. Download new python and odoo dependencies"
            "\n\t     clone_oca_dependencies"
            "\n\n\t  4. Create databases"
            "\n\t     dropdb openerp_test"
            "\n\t     dropdb openerp_template"
            "\n\t     TEST_ENANLE=0 /entrypoint.sh"
        )

        self.confirm_run(self.args)
        print '\nNew development instance for {env}'.format(env=self.env)

        self.confirm_required = False

        logging.info('Clean instance branches')
        self.reset_branches()
        self.checkout_branches()
        self.update_instance()

        logging.info('Updated Branches status')
        self.check_instance()

        logging.info('Download new python and odoo dependencies')
        os.system(
            '/root/maintainer-quality-tools/travis/clone_oca_dependencies')

        self.create_database()
        return True

    def create_database(self):
        """
        Drop old databases and create new one
        """
        logging.info('Create new databases from scratch')
        logging.info('Start postgres server')
        os.system(
            '/etc/init.d/postgresql start'
            ' && wait && echo ready postgres server')

        logging.info('Drop old openerp_test and openerp_template databases')
        os.system(
            'dropdb openerp_test --if-exist'
            ' && dropdb openerp_template --if-exist')

        logging.info('Create new database with installed modules')
        os.system(
            'TEST_ENABLE=0 /entrypoint.sh')

    def fetch_branches(self):
        """
        run git fetch --all to update branchs
        """
        print '\nfetch branches in {env}'.format(env=self.env)
        for (repo, branch) in self.cr_repo.iteritems():
            path = branch['path']
            self.print_repo_data(repo, branch)
            os.system('cd {path} && git fetch --all'.format(path=path))
        return True

    def diff_branches(self):
        """
        run git diff
        """
        print '\ndiff branches in {env}'.format(env=self.env)
        for (repo, branch) in self.cr_repo.iteritems():
            path = branch['path']
            self.print_repo_data(repo, branch)
            os.system('cd {path} && git diff'.format(path=path))
        return True

    def reset_branches(self):
        """
        run git reset --hard
        """
        self.confirm_run(self.args)
        print '\ndiff branches in {env}'.format(env=self.env)
        for (repo, branch) in self.cr_repo.iteritems():
            path = branch['path']
            self.print_repo_data(repo, branch)
            os.system('cd {path} && git reset --hard'.format(path=path))
        return True

    def checkout_branches(self):
        """
        This method change the branchs to the one defined as the master.
        git checkout master
        @return True
        """
        self.confirm_run(self.args)
        print '\nCheck status of {env} branches'.format(env=self.env)
        for (repo, branch) in self.cr_repo.iteritems():
            path = branch['path']
            self.print_repo_data(repo, branch)
            os.system('cd {path} && git checkout {branch}'.format(
                path=path, branch=branch['branch']))
        return True

    def branch_summary(self):
        self.confirm_run(self.args)
        print '\nSummary of {env} branches'.format(env=self.env)
        for (repo, branch) in self.cr_repo.iteritems():
            path = branch['path']
            self.print_repo_data(repo, branch)

            # TODO overwrite this method and all methods to only run the
            # command inside the method and have a global method to make the
            # iteration for every branch

            # status
            print '\n> Status'
            os.system('cd {path} && git log --oneline -1'.format(path=path))
            os.system('cd {path} && git status -sb'.format(path=path))
            # diff
            print '\n> Differences'
            os.system('cd {path} && git diff'.format(path=path))
            # stash
            print '\n> Stash list'
            os.system('cd {path} && git stash list'.format(path=path))
            # unermeged
            print '\n> Unmerged branchs'
            os.system('cd {path} && git branch --no-merged'.format(path=path))


def main():
    obj = OerpInstance()
    obj.run()
    return True

if __name__ == '__main__':
    main()
